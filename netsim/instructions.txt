sudo apt-get install libvirt-bin genisoimage libguestfs-tools libosinfo-bin virtinst qemu-kvm git vim net-tools wget curl bash-completion python-pip libvirt-daemon-system virt-manager bridge-utils libnss-libvirt libvirt-clients osinfo-db-tools intltool sshpass libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev -y && \
sudo sed -i 's/hosts:          files dns/hosts:          files libvirt libvirt_guest dns/' /etc/nsswitch.conf && sudo lsmod | grep kvm && sudo reboot

# Create the iason user
sudo useradd iason -m -s /bin/bash && sudo usermod -aG sudo iason && echo "iason:iason" | chpasswd && echo "iason ALL=(root) NOPASSWD:ALL" | sudo tee -a /etc/sudoers.d/iason && \
sudo chmod 0440 /etc/sudoers.d/iason && su - iason

# Prepare the hypervisor node.
mkdir .ssh && ssh-keygen -q -t rsa -N "" -f .ssh/id_rsa && cat .ssh/id_rsa.pub >> .ssh/authorized_keys && sudo bash -c "cat .ssh/id_rsa.pub >> /root/.ssh/authorized_keys" && \
ssh -o "StrictHostKeyChecking=no" root@127.0.0.1 uname -a

# https://github.com/netenglabs/automatic-for-the-people
# Vagrant 2.2.7
# Ansible 2.9.5/2.9.9

curl -L -o vagrant.deb https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.deb && sudo dpkg -i vagrant.deb && vagrant plugin install vagrant-libvirt

vagrant -v && vagrant plugin list

# http://www.nimbusproject.org/docs/current/admin/z2c/vmm-setup.html
sudo adduser `id -un` libvirt-qemu && sudo adduser `id -un` kvm && sudo adduser `id -un` libvirt-dnsmasq && sudo sed -i 's/0770/0777/' /etc/libvirt/libvirtd.conf && sudo systemctl restart libvirtd && sudo systemctl status libvirtd

# virsh pool-edit default 
# Change permission to: 0777
# sudo systemctl restart libvirtd && sudo systemctl status libvirtd

exit

cd /mnt/extra
cat << EOF | tee vagrant-libvirt-net.xml
<network connections='1'>
  <name>vagrant-libvirt</name>
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
  <bridge name='virbr125' stp='on' delay='0'/>
  <ip address='192.168.125.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.125.2' end='192.168.125.254'/>
    </dhcp>
  </ip>
</network>
EOF

virsh net-define vagrant-libvirt-net.xml && \
virsh net-start vagrant-libvirt && virsh net-autostart vagrant-libvirt

su - iason

virsh list --all && virsh net-list --all

#################################################################################################################################################################
#################################################################################################################################################################
# Creation of IOSv box
# https://codingpackets.com/blog/cisco-iosv-vagrant-libvirt-box-install/
#################################################################################################################################################################
#################################################################################################################################################################

cd ~ && mkdir -p ~/vagrant/boxes/cisco/iosv && cd ~/vagrant/boxes/cisco/iosv && cp /users/vpasias/vios-adventerprisek9-m.vmdk.SPA.156-1.T . && ls -lah && \
curl -O https://raw.githubusercontent.com/vagrant-libvirt/vagrant-libvirt/master/tools/create_box.sh && \
qemu-img convert -f vmdk -O qcow2 vios-adventerprisek9-m.vmdk.SPA.156-1.T iosv.qcow2

virt-install \
    --connect=qemu:///system \
    --network network=vagrant-libvirt,model=e1000 \
    --name=iosv \
    --cpu host \
    --arch=x86_64 \
    --machine=pc-1.0 \
    --vcpus=1 \
    --ram=512 \
    --os-type=linux \
    --noacpi \
    --virt-type=kvm \
    --watchdog i6300esb,action=reset \
    --disk path=iosv.qcow2,format=qcow2,device=disk,bus=virtio,cache=writethrough \
    --graphics none \
    --import
    
no
en
conf t

hostname iosv
!
ip domain-name lab.local
!
crypto key generate rsa modulus 2048
ip ssh version 2
!
aaa new-model
!
aaa authentication login default local
aaa authorization exec default local
!
username vagrant privilege 15 secret vagrant
!
ip ssh pubkey-chain
  username vagrant
    key-hash ssh-rsa DD3BB82E850406E9ABFFA80AC0046ED6
!
vrf definition MGMT
 description Management interface
 !
 address-family ipv4
 exit-address-family
!
interface GigabitEthernet0/0
  description vagrant-management
  vrf forwarding MGMT
  ip address dhcp
  duplex auto
  speed auto
  media-type rj45
  no shutdown
!
line vty 0 4
 transport input ssh
!
event manager applet ENABLE-MGMT
 event syslog pattern "SYS-5-RESTART"
 action 0 cli command "enable"
 action 1 cli command "conf t"
 action 2 cli command "crypto key generate rsa modulus 2048"
 action 3 cli command "interface GigabitEthernet0/0"
 action 4 cli command "no shutdown"
 action 5 cli command "exit"
!
end

wr
wr mem

show ip int brie
# IP address: 192.168.125.63 

ssh vagrant@192.168.125.63 -i ~/.vagrant.d/insecure_private_key
exit

virsh destroy iosv

cat << EOF | tee metadata.json
{"provider":"libvirt","format":"qcow2","virtual_size":2}
EOF

bash create_box.sh iosv.qcow2

cat << EOF | tee iosv.json
{
  "name": "cisco/iosv",
  "description": "Cisco IOSv",
  "versions": [
    {
      "version": "15.6-1-T",
      "providers": [
        {
          "name": "libvirt",
          "url": "file:///home/iason/vagrant/boxes/cisco/iosv/iosv.box"
        }
      ]
    }
  ]
}
EOF

vagrant box add iosv.json

vagrant box list

# Testing

mkdir ~/iosv-test && cd ~/iosv-test

nano Vagrantfile

# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.define "rt01" do |node|
    node.vm.box = "cisco/iosv"

    # Turn off shared folders
    node.vm.synced_folder ".", "/vagrant", disabled: true

    # Do not try to insert new SSH key
    node.ssh.insert_key = false

    # Give VM time to boot
    node.vm.boot_timeout = 180

    # Set guest type to prevent guest type detection
    node.vm.guest = :freebsd

    # Provider-specific configuration
    node.vm.provider :libvirt do |domain|
      domain.nic_adapter_count = 8
      domain.memory = 512
      domain.cpus = 1
      domain.driver = "kvm"
      domain.nic_model_type = "e1000"
    end

  end
end
#

vagrant up

vagrant ssh
exit

vagrant destroy -f

#################################################################################################################################################################
#################################################################################################################################################################
# Creation of csr1000v box
# https://codingpackets.com/blog/cisco-csr-1000v-vagrant-libvirt-box-install/
#################################################################################################################################################################
#################################################################################################################################################################

mkdir -p ~/vagrant/boxes/cisco/csr1kv && cd ~/vagrant/boxes/cisco/csr1kv && cp /users/vpasias/csr1000v-universalk9.03.15.00.S.155-2.S-std.qcow2 . && ls -lah && \
curl -O https://raw.githubusercontent.com/vagrant-libvirt/vagrant-libvirt/master/tools/create_box.sh

virt-install \
    --connect=qemu:///system \
    --name=csr1000v \
    --os-type=linux \
    --os-variant=rhel4 \
    --arch=x86_64 \
    --cpu host \
    --vcpus=1 \
    --hvm \
    --ram=4096 \
    --disk path=csr1000v-universalk9.03.15.00.S.155-2.S-std.qcow2,bus=ide,format=qcow2 \
    --network=network:vagrant-libvirt,model=virtio \
    --import

enable
conf t
platform console serial
end
copy system:running-config nvram:startup-config
reload

virsh console csr1000v

en
conf t

hostname csr
ip domain-name lab.local
!
crypto key generate rsa modulus 2048
ip ssh version 2
!
aaa new-model
!
aaa authentication login default local
aaa authorization exec default local
!
username vagrant privilege 15 secret vagrant
!
ip ssh pubkey-chain
  username vagrant
    key-hash ssh-rsa DD3BB82E850406E9ABFFA80AC0046ED6
!
!
interface GigabitEthernet1
  description vagrant-management
  ip address dhcp
  no shutdown
!
end

wr
wr mem

show ip int brie
# IP address: 192.168.125.227 

ssh vagrant@192.168.125.227 -i ~/.vagrant.d/insecure_private_key
exit

virsh shutdown csr1000v

cat << EOF | tee metadata.json
{"provider":"libvirt","format":"qcow2","virtual_size":8}
EOF

bash create_box.sh csr1000v-universalk9.03.15.00.S.155-2.S-std.qcow2

cat << EOF | tee csr1kv.json
{
  "name": "cisco/csr1000v",
  "description": "Cisco csr1000v",
  "versions": [
    {
      "version": "03.15.00.S-155-2-S",
      "providers": [
        {
          "name": "libvirt",
          "url": "file:///home/iason/vagrant/boxes/cisco/csr1kv/csr1000v-universalk9.03.15.00.S.155-2.S-std.box"
        }
      ]
    }
  ]
}
EOF

vagrant box add csr1kv.json

vagrant box list

# Testing

mkdir ~/csrv-test && cd ~/csrv-test

nano Vagrantfile

# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "cisco/csr1000v"

  # Turn off shared folders
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Do not try to insert new SSH key
  config.ssh.insert_key = false

  # Give VM time to boot
  config.vm.boot_timeout = 180

  # Set guest type to prevent guest type detection
  config.vm.guest = :freebsd

  # Provider-specific configuration
  config.vm.provider :libvirt do |domain|
    domain.nic_adapter_count = 8
    domain.memory = 4096
    domain.cpus = 2
    domain.driver = "kvm"
  end

end
#

vagrant up

vagrant ssh
exit

vagrant destroy -f

#################################################################################################################################################################
#################################################################################################################################################################
# Creation of Nexus 9000v box
# https://github.com/mweisel/cisco-nxos9kv-vagrant-libvirt
#################################################################################################################################################################
#################################################################################################################################################################

cd ~ && git clone https://github.com/vpasias/cisco-nxos9kv-vagrant-libvirt.git && cd cisco-nxos9kv-vagrant-libvirt

wget http://37.156.146.163/PUB/Cisco/IOS/Nexus3K_9K/nexus9500v.9.3.6.qcow2 $$ sudo cp nexus9500v.9.3.6.qcow2 /var/lib/libvirt/images/cisco-nxosv.qcow2 && \
sudo chown libvirt-qemu:kvm /var/lib/libvirt/images/cisco-nxosv.qcow2 && sudo chmod u+x /var/lib/libvirt/images/cisco-nxosv.qcow2 && \
dpkg -L ovmf | grep -E 'OVMF_(CODE|VARS)\.fd'

ansible-playbook main.yml

vagrant box add --provider libvirt --name cisco-nexus9500v-9.3.6 ./cisco-nxosv.box

#################################################################################################################################################################
#################################################################################################################################################################
# Netsim-tools prerequisities installation
# https://netsim-tools.readthedocs.io/en/latest/
#################################################################################################################################################################
#################################################################################################################################################################

sudo apt -y update && sudo apt install -y python3-minimal python3-pip jq apt-transport-https ca-certificates gnupg-agent software-properties-common tree ack curl && \ 
sudo -H pip3 install -U setuptools && sudo -H pip3 install -U pyyaml jinja2 && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable" && \
sudo apt-get update -y && \
sudo apt-get install docker-ce docker-ce-cli containerd.io && \
sudo usermod -aG docker $USER

docker run -it --rm \
    --user $(id -u):$(id -g) \
    --volume $(pwd):/ansible \
    --volume="/etc/group:/etc/group:ro" \
    --volume="/etc/passwd:/etc/passwd:ro" \
    --volume="/etc/shadow:/etc/shadow:ro" \
    --volume="/home/$USER:/home/$USER" \
    ipspace/automation:ubuntu $@

docker ps && ansible --version

#################################################################################################################################################################
#################################################################################################################################################################
# Netsim Example 1
# https://github.com/ipspace/netsim-examples/tree/master/BGP/IGP-metric
#################################################################################################################################################################
#################################################################################################################################################################

cd ~ && git clone --recurse-submodules https://github.com/ipspace/netsim-examples.git && cd netsim-example && ./setup.sh && cd BGP/IGP-metric/

create-topology -t topology-ospf.yml -g -c -i

vagrant up
initial-config.ansible
config.ansible -e config=igp
config.ansible -e config=bgp

#################################################################################################################################################################
#################################################################################################################################################################
# Netsim Example 2
# https://github.com/ipspace/netsim-examples/tree/master/routing/failover
#################################################################################################################################################################
#################################################################################################################################################################

cd ~ && git clone --recurse-submodules https://github.com/ipspace/netsim-examples.git && cd netsim-example && ./setup.sh && cd routing/failover/

create-topology -t topology.yml -g -c -i

vagrant up
initial-config.ansible
config.ansible -e config=routing-ospf

#################################################################################################################################################################
#################################################################################################################################################################
# DR Data Center Solutions
# 1) DR solution involving VRF/MP-BGP Router on a Stick with NAT - multiple VRFs with NAT:
# https://dancwilliams.com/cisco-vrfmp-bgp-router-on-a-stick-with-nat/
# https://sudonull.com/post/93630-Two-providers-at-the-same-time-or-Dual-ISP-with-VRF-on-Cisco
# 2) DR solution involving multiple VRFs with BGP route targets import changes:
# https://blog.ipspace.net/2019/12/you-dont-need-ip-renumbering-for.html
#################################################################################################################################################################
#################################################################################################################################################################
